local a=table;local b=require("my.gears.math")local c={}function c.join(...)local d={}for e=1,select("#",...)do local f=select(e,...)if f then for g,h in pairs(f)do if type(g)=="number"then a.insert(d,h)else d[g]=h end end end end;return d end;function c.crush(f,i,j)if j then for g,h in pairs(i)do rawset(f,g,h)end else for g,h in pairs(i)do f[g]=h end end;return f end;function c.from_sparse(f)local k={}for g in pairs(f)do if type(g)=="number"then k[#k+1]=g end end;table.sort(k)local d={}for l,h in ipairs(k)do d[#d+1]=f[h]end;return d end;function c.hasitem(f,m)for g,h in pairs(f)do if h==m then return g end end end;function c.find_keys(f,n,o,p)if p==0 then return nil end;o,p=o or false,0;local d,q={},o and ipairs or pairs;for g,h in q(f)do if n(g,h)then table.insert(d,g)if#d==p then break end end end;return#d>0 and d or nil end;function c.find_first_key(f,n,o)local d=c.find_keys(f,n,o,1)return d and d[1]or nil end;function c.keys(f)local k={}for g,l in pairs(f)do a.insert(k,g)end;a.sort(k,function(r,s)return type(r)==type(s)and r<s or false end)return k end;function c.keys_filter(f,...)local k=c.keys(f)local t={}for l,g in pairs(k)do for l,u in pairs({...})do if type(f[g])==u then a.insert(t,g)break end end end;return t end;function c.reverse(f)local v={}for l,h in ipairs(f)do a.insert(v,1,h)end;for g,h in pairs(f)do if type(g)~="number"then v[g]=h end end;return v end;function c.clone(f,w)w=w==nil and true or w;local x={}for g,h in pairs(f)do if w and type(h)=="table"then x[g]=c.clone(h)else x[g]=h end end;return x end;function c.cycle_value(f,y,z,A,B)local g=c.hasitem(f,y,true,B)if not g then return end;z=z or 1;local C=b.cycle(#f,g+z)if A and not A(f[C])then for e=1,#f,z do local D=b.cycle(#f,C+e)if A(f[D])then return f[D],D end end;return end;return f[C],C end;function c.iterate(f,A,E)local F=0;local G=E or 1;local H=#f;return function()while F<H do local m=f[G]G=b.cycle(#f,G+1)F=F+1;if A(m)then return m end end end end;function c.merge(f,i)for l,h in ipairs(i)do table.insert(f,h)end;return f end;function c.diff_merge(I,J,K,L)local M,N,O={},{},{}local P,Q=c.clone(J,false),c.clone(I,false)for l,h in ipairs(I)do N[K(h)]=h end;for l,h in ipairs(J)do M[K(h)]=h end;for g,h in ipairs(Q)do if M[K(h)]then Q[g]=nil end end;for g,h in ipairs(P)do local R=K(h)local S=N[R]if S then P[g]=nil;if L then N[R]=L(S,h)table.insert(O,S)end else table.insert(I,h)end end;for g,h in ipairs(I)do local R=K(h)if N[R]then I[g]=N[R]end end;Q,P=c.from_sparse(Q),c.from_sparse(P)for l,h in ipairs(Q)do for g,T in ipairs(I)do if h==T then table.remove(I,g)break end end end;return I,P,Q,O end;function c.map(U,V)local f={}for g,h in pairs(V)do f[g]=U(h)end;return f end;return c