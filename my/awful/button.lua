local setmetatable=setmetatable;local ipairs=ipairs;local a={button=button,root=root}local b=require("my.gears.math")local c=require("my.gears.table")local d=require("my.gears.object")local button={mt={}}local e=setmetatable({},{__mode="k"})local f={"Lock","Mod2"}button.names={LEFT=1,MIDDLE=2,RIGHT=3,SCROLL_UP=4,SCROLL_DOWN=5}function button:set_button(g)for h,i in ipairs(self)do i.button=g end end;function button:set_modifiers(j)local k=b.subsets(f)for l,m in ipairs(k)do self[l].modifiers=c.join(j,m)end end;for h,n in ipairs{"name"}do button["get_"..n]=function(self)return e[self][n]end;button["set_"..n]=function(self,o)e[self][n]=o end end;for h,n in ipairs{"press","release"}do local p="on_"..n;button["get_"..p]=function(self)return e[self].weak_content[p]end;button["set_"..p]=function(self,o)local q=e[self].weak_content[p]local r=function(h,...)o(...)end;if q then for s=1,4 do self[s]:disconnect_signal(n,q)end end;e[self].weak_content[n]=r;for s=1,4 do self[s]:connect_signal(n,r)end end end;function button:get_button()return self[1].button end;function button:trigger()local t=e[self]local u=self.on_press or t.weak_content.press;if u then u()end;local v=self.on_release or t.weak_content.release;if v then v()end end;function button:get_has_root_binding()return a.root.has_button(self)end;function button:get__is_awful_button()return true end;local function w(self,l)if button["get_"..l]then return button["get_"..l](self)end;if type(button[l])=="function"then return button[l]end;local t=e[self]assert(t)if t[l]~=nil then return t[l]else return t.weak_content[l]end end;local function x(self,y,o)if button["set_"..y]then return button["set_"..y](self,o)end;local t=e[self]assert(t)if t.weak_content[y]~=nil then t.weak_content[y]=o else t[y]=o end end;local z={__index=w,__newindex=x}local function A(j,B,u,v)local C={}local k=b.subsets(f)for h,m in ipairs(k)do local D=a.button{modifiers=c.join(j,m),button=B}D._private._legacy_convert_to=C;C[#C+1]=D end;e[C]={weak_content=setmetatable({press=u,release=v},{__mode="v"}),_is_capi_button=false}if u then button.set_on_press(C,u)end;if v then button.set_on_release(C,v)end;return setmetatable(C,z)end;function button.new(E,B,u,v)if not B then assert(not(u or v),"Calling awful.button() requires a button name")return A(E.modifiers,E.button,E.on_press,E.on_release)else return A(E,B,u,v)end end;function button.mt:__call(...)return button.new(...)end;d.properties(a.button,{auto_emit=true})return setmetatable(button,button.mt)