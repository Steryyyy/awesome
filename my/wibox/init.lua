local a={drawin=drawin,root=root,awesome=awesome,screen=screen}local setmetatable=setmetatable;local pairs=pairs;local type=type;local b=require("my.gears.object")local c=require("my.gears.geometry").rectangle;local d=require("my.beautiful")local e=require("my.wibox.widget.base")local f=require("lgi").cairo;local g={mt={},object={}}g.layout=require("my.wibox.layout")g.container=require("my.wibox.container")g.widget=require("my.wibox.widget")g.drawable=require("my.wibox.drawable")g.hierarchy=require("my.wibox.hierarchy")local h={shape_bounding=true,shape_clip=true,shape_input=true}function g:set_widget(i)local j=e.make_widget_from_value(i)self._drawable:set_widget(j)self:emit_signal("property::widget",i)end;function g:get_widget()return self._drawable.widget end;g.setup=e.widget.setup;function g:set_bg(k)self._drawable:set_bg(k)self:emit_signal("property::bg",k)end;function g:set_bgimage(l,...)self._drawable:set_bgimage(l,...)self:emit_signal("property::bgimage",...)end;function g:set_fg(k)self._drawable:set_fg(k)self:emit_signal("property::fg",k)end;function g:find_widgets(m,n)return self._drawable:find_widgets(m,n)end;function g:_buttons(o)return o and self.drawin:_buttons(o)or self.drawin:_buttons()end;function g:to_widget()local p=self.border_width or d.border_width or 0;return g.widget{{self:get_widget(),margins=p,widget=g.container.margin},bg=self.bg or d.bg_normal or"#ffffff",fg=self.fg or d.fg_normal or"#000000",shape_border_color=self.border_color or d.border_color or"#000000",shape_border_width=p*2,shape_clip=true,shape=self._shape,forced_width=self:geometry().width+2*p,forced_height=self:geometry().height+2*p,widget=g.container.background}end;function g:save_to_svg(q,r)g.widget.draw_to_svg_file(self:to_widget(),q,self:geometry().width,self:geometry().height,r)end;function g:_apply_shape()local s=self._shape;if not s then self.shape_bounding=nil;self.shape_clip=nil;return end;local t=self:geometry()local p=self.border_width;local u=f.ImageSurface(f.Format.A1,t.width+2*p,t.height+2*p)local v=f.Context(u)s(v,t.width+2*p,t.height+2*p)v:set_operator(f.Operator.SOURCE)v:fill()self.shape_bounding=u._native;u:finish()u=f.ImageSurface(f.Format.A1,t.width,t.height)v=f.Context(u)v:translate(-p,-p)s(v,t.width+2*p,t.height+2*p)v:set_operator(f.Operator.SOURCE)v:fill_preserve()v:set_source_rgba(0,0,0,0)v:set_line_width(2*p)v:stroke()self.shape_clip=u._native;u:finish()end;function g:set_shape(s)self._shape=s;self:_apply_shape()self:emit_signal("property::shape",s)end;function g:get_shape()return self._shape end;function g:set_input_passthrough(w)rawset(self,"_input_passthrough",w)if not w then self.shape_input=nil else local u=f.ImageSurface(f.Format.A1,0,0)self.shape_input=u._native;u:finish()end;self:emit_signal("property::input_passthrough",w)end;function g:get_input_passthrough()return self._input_passthrough end;function g:get_screen()if self.screen_assigned and self.screen_assigned.valid then return self.screen_assigned else self.screen_assigned=nil end;local x={}for y in a.screen do x[y]=y.geometry end;return c.get_closest_by_coord(x,self.x,self.y)end;function g:set_screen(y)y=a.screen[y or 1]if y~=self:get_screen()then self.x=y.geometry.x;self.y=y.geometry.y end;self.screen_assigned=y;self._drawable:_force_screen(y)self:emit_signal("property::screen",y)end;function g:get_children_by_id(z)if rawget(self,"_by_id")then return rawget(self,"_by_id")[z]elseif self._drawable.widget and self._drawable.widget._private and self._drawable.widget._private.by_id then return self._drawable.widget._private.by_id[z]end;return{}end;for A,B in ipairs{"border_width","border_color","opacity"}do g["get_"..B]=function(self)return self["_"..B]end;g["set_"..B]=function(self,w)self._private["_user_"..B]=true;self["_"..B]=w end end;for A,C in ipairs{"struts","geometry","get_xproperty","set_xproperty"}do g[C]=function(self,...)return self.drawin[C](self.drawin,...)end end;b.properties._legacy_accessors(g.object,"buttons","_buttons",true,function(D)return D[1]and(type(D[1])=="button"or D[1]._is_capi_button)or false end,true)local function E(F)local G;local function H(z)G:connect_signal(z,function(A,...)F:emit_signal(z,...)end)end;G=F.drawin;H("property::border_color")H("property::border_width")H("property::buttons")H("property::cursor")H("property::height")H("property::ontop")H("property::opacity")H("property::struts")H("property::visible")H("property::width")H("property::x")H("property::y")H("property::geometry")H("property::shape_bounding")H("property::shape_clip")H("property::shape_input")G=F._drawable;H("button::press")H("button::release")H("mouse::enter")H("mouse::leave")H("mouse::move")H("property::surface")end;local function I(J)J=J or{}local K=b()local j=a.drawin(J)function j.get_wibox()return K end;K.drawin=j;K._drawable=g.drawable(j.drawable,{wibox=K},"my.wibox drawable ("..b.modulename(3)..")")function K._drawable.get_wibox()return K end;K._drawable:_inform_visible(j.visible)j:connect_signal("property::visible",function()K._drawable:_inform_visible(j.visible)end)for C,L in pairs(g)do if not rawget(K,C)and type(L)=="function"then K[C]=L end end;E(K)K.draw=K._drawable.draw;K:set_bg(J.bg or d.bg_normal)K:set_fg(J.fg or d.fg_normal)local M={}local N=tostring(K)M.__tostring=function()return string.format("my.wibox: %s (%s)",tostring(K._drawable),N)end;K=setmetatable(K,M)K.draw()K:connect_signal("property::geometry",K._apply_shape)K:connect_signal("property::border_width",K._apply_shape)setmetatable(K,{__index=function(self,C)if rawget(self,"get_"..C)then return self["get_"..C](self)else return j[C]end end,__newindex=function(self,C,L)if rawget(self,"set_"..C)then self["set_"..C](self,L)elseif h[C]or j[C]~=nil then j[C]=L else rawset(self,C,L)end end})if J.bgimage then K:set_bgimage(J.bgimage)end;if J.widget then K:set_widget(J.widget)end;if J.screen then K:set_screen(J.screen)end;if J.shape then K.shape=J.shape end;if J.border_width then K.border_width=J.border_width end;if J.border_color then K.border_color=J.border_color end;if J.opacity then K.opacity=J.opacity end;if J.input_passthrough then K.input_passthrough=J.input_passthrough end;K:_connect_everything(g.emit_signal)return K end;function g.mt:__call(...)return I(...)end;b.properties(a.drawin,{getter_class=g.object,setter_class=g.object,auto_emit=true})a.drawin.object=g.object;b._setup_class_signals(g)return setmetatable(g,g.mt)