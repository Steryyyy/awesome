local a=require("my.gears.table")local b=require("my.wibox.widget.base")local unpack=unpack or table.unpack;local c={}function c:insert(d,e)table.insert(self._private.widgets,d,e)if e.point then table.insert(self._private.pos,d,e.point)end;self:emit_signal("widget::inserted",e,#self._private.widgets)self:emit_signal("widget::layout_changed")end;function c:fit(f,g,h)return g,h end;local function i(self,j)self._new_geo=j;return self._new_geo or self end;function c:layout(k,g,h)local l={}for m,n in ipairs(self._private.widgets)do local o=self._private.pos[m]or{x=0,y=0}local p,q=b.fit_widget(self,k,n,g,h)if type(o)=="function"or(getmetatable(o)or{}).__call then local r={x=0,y=0,width=p,height=q,geometry=i}o=o(r,{parent={x=0,y=0,width=g,height=h,geometry=i}})a.crush(o,r._new_geo or{})end;assert(o.x)assert(o.y)table.insert(l,b.place_widget_at(n,o.x,o.y,o.width or p,o.height or q))end;return l end;function c:add(...)local s={}local t=#self._private.widgets;for f,n in ipairs{...}do local p=b.make_widget_from_value(n)b.check_widget(p)table.insert(s,p)end;a.merge(self._private.widgets,s)for m,n in ipairs(s)do if n.point then self._private.pos[t+m]=n.point end end;self:emit_signal("widget::layout_changed")end;function c:add_at(e,u)assert(not e.point,"2 points are specified, only one is supported")if type(u)=="function"or(getmetatable(u)or{}).__call then local v={x=0,y=0,width=1,height=1,geometry=i}local o=u(v,{parent={x=0,y=0,width=10,height=10,geometry=i}})assert(o and o.x and o.y,"The point function doesn't seem to be valid")end;self._private.pos[#self._private.widgets+1]=u;self:add(b.make_widget_from_value(e))end;function c:move(d,u)assert(self._private.pos[d])self._private.pos[d]=u;self:emit_signal("widget::layout_changed")end;function c:move_widget(e,u)local w,x=self:index(e,false)if w then x:move(w,u)end end;function c:get_children()return self._private.widgets end;function c:set_children(y)self:reset()self:add(unpack(y))end;function c:reset()self._private.widgets={}self._private.pos={}self:emit_signal("widget::layout_changed")end;local function z(...)local A=b.make_widget(nil,nil,{enable_properties=true})a.crush(A,c,true)A._private.widgets={}A._private.pos={}A:add(...)return A end;return setmetatable(c,{__call=function(f,...)return z(...)end})