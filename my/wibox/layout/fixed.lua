local unpack=unpack or table.unpack;local a=require("my.wibox.widget.base")local table=table;local pairs=pairs;local b=require("my.gears.table")local c={}function c:layout(d,e,f)local g={}local h,i=0,self._private.spacing;local j=self._private.spacing_widget;local k=self._private.dir=="y"local l=not k;local m=math.abs(i)local n=i<0 and 0 or i;for o,p in pairs(self._private.widgets)do local q,r,s,t,u;if k then q,r=0,h;s,t=e,f-h;if o~=#self._private.widgets or not self._private.fill_space then u,t=a.fit_widget(self,d,p,s,t)end;h=h+t+i else q,r=h,0;s,t=e-h,f;if o~=#self._private.widgets or not self._private.fill_space then s,u=a.fit_widget(self,d,p,s,t)end;h=h+s+i end;if k and h-i>f or l and h-i>e then break end;if o>1 and m>0 and j then table.insert(g,a.place_widget_at(j,l and q-n or q,k and r-n or r,l and m or s,k and m or t))end;table.insert(g,a.place_widget_at(p,q,r,s,t))end;return g end;function c:add(...)local v={n=select('#',...),...}assert(v.n>0,"need at least one widget to add")for w=1,v.n do local s=a.make_widget_from_value(v[w])a.check_widget(s)table.insert(self._private.widgets,s)end;self:emit_signal("widget::layout_changed")end;function c:remove(x)if not x or x<1 or x>#self._private.widgets then return false end;table.remove(self._private.widgets,x)self:emit_signal("widget::layout_changed")return true end;function c:remove_widgets(...)local v={...}local y=type(v[#v])=="boolean"and v[#v]local z=true;for o,A in ipairs(v)do if y and o==#v then break end;local B,C=self:index(A,y)if B and C and C.remove then C:remove(B,false)else z=false end end;return#v>(y and 1 or 0)and z end;function c:get_children()return self._private.widgets end;function c:set_children(D)self:reset()if#D>0 then self:add(unpack(D))end end;function c:replace_widget(E,F,y)local B,C=self:index(E,y)if B and C then C:set(B,F)return true end;return false end;function c:swap(G,H)if not G or not H or G>#self._private.widgets or H>#self._private.widgets then return false end;local I,F=self._private.widgets[G],self._private.widgets[H]self:set(G,F)self:set(H,I)self:emit_signal("widget::swapped",I,F,H,G)return true end;function c:swap_widgets(I,F,y)a.check_widget(I)a.check_widget(F)local J,K=self:index(I,y)local L,M=self:index(F,y)if J and K and L and M and(K.set or K.set_widget)and(M.set or M.set_widget)then if K.set then K:set(J,F)if K==self then self:emit_signal("widget::swapped",I,F,L,J)end elseif K.set_widget then K:set_widget(F)end;if M.set then M:set(L,I)if M==self then self:emit_signal("widget::swapped",I,F,L,J)end elseif M.set_widget then M:set_widget(I)end;return true end;return false end;function c:set(x,F)if not F or not self._private.widgets[x]then return false end;a.check_widget(F)local s=self._private.widgets[x]self._private.widgets[x]=F;self:emit_signal("widget::layout_changed")self:emit_signal("widget::replaced",F,s,x)return true end;function c:set_spacing_widget(N)self._private.spacing_widget=a.make_widget_from_value(N)self:emit_signal("widget::layout_changed")self:emit_signal("property::spacing_widget",N)end;function c:insert(x,E)if not x or x<1 or x>#self._private.widgets+1 then return false end;a.check_widget(E)table.insert(self._private.widgets,x,E)self:emit_signal("widget::layout_changed")self:emit_signal("widget::inserted",E,#self._private.widgets)return true end;function c:fit(d,O,P)local e,f=O,P;local Q,R=0,0;for u,p in pairs(self._private.widgets)do local s,t=a.fit_widget(self,d,p,e,f)local S,T;if self._private.dir=="y"then T,S=s,t;f=f-S else S,T=s,t;e=e-S end;if T>R then R=T end;Q=Q+S;if e<=0 or f<=0 then if self._private.dir=="y"then Q=P else Q=O end;break end end;local i=self._private.spacing*(#self._private.widgets-1)if self._private.dir=="y"then return R,Q+i end;return Q+i,R end;function c:reset()self._private.widgets={}self:emit_signal("widget::layout_changed")self:emit_signal("widget::reseted")self:emit_signal("widget::reset")end;function c:fill_space(U)if self._private.fill_space~=U then self._private.fill_space=not not U;self:emit_signal("widget::layout_changed")self:emit_signal("property::fill_space",U)end end;local function V(W,I,...)local z=a.make_widget(nil,nil,{enable_properties=true})b.crush(z,c,true)z._private.dir=W;z._private.widgets={}z:set_spacing(0)z:fill_space(false)if I then z:add(I,...)end;return z end;function c.horizontal(...)return V("x",...)end;function c.vertical(...)return V("y",...)end;function c:set_spacing(i)if self._private.spacing~=i then self._private.spacing=i;self:emit_signal("widget::layout_changed")self:emit_signal("property::spacing",i)end end;function c:get_spacing()return self._private.spacing or 0 end;return c