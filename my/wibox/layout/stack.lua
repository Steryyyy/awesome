local a=require("my.wibox.widget.base")local b=require("my.wibox.layout.fixed")local table=table;local pairs=pairs;local c=require("my.gears.table")local d={mt={}}function d:layout(e,f,g)local h={}local i=self._private.spacing;f=f-math.abs(self._private.h_offset*#self._private.widgets)-2*i;g=g-math.abs(self._private.v_offset*#self._private.widgets)-2*i;local j,k=i,i;for e,l in pairs(self._private.widgets)do table.insert(h,a.place_widget_at(l,j,k,f,g))j,k=j+self._private.h_offset,k+self._private.v_offset;if self._private.top_only then break end end;return h end;function d:fit(m,n,o)local p,q=0,0;local i=self._private.spacing;for e,l in pairs(self._private.widgets)do local r,s=a.fit_widget(self,m,l,n,o)p,q=math.max(p,r+2*i),math.max(q,s+2*i)end;return math.min(p,n),math.min(q,o)end;function d:get_top_only()return self._private.top_only end;function d:set_top_only(t)self._private.top_only=t;self:emit_signal("widget::layout_changed")self:emit_signal("property::top_only",t)end;function d:raise(u)if not u or self._private.widgets[u]then return end;local r=self._private.widgets[u]table.remove(self._private.widgets,u)table.insert(self._private.widgets,r)self:emit_signal("widget::layout_changed")end;function d:raise_widget(v,w)local x,y=self:index(v,w)if not x or not y then return end;while y and y~=self do x,y=self:index(y,w)end;if y==self and x~=1 then self:raise(x)end end;function d:set_horizontal_offset(z)self._private.h_offset=z;self:emit_signal("widget::horizontal_offset")self:emit_signal("property::top_only",z)end;function d:set_vertical_offset(z)self._private.v_offset=z;self:emit_signal("widget::layout_changed")self:emit_signal("property::vertical_offset",z)end;local function A(...)local B=b.horizontal(...)c.crush(B,d,true)B._private.h_offset=0;B._private.v_offset=0;return B end;function d.mt:__call(e,...)return A(...)end;return setmetatable(d,d.mt)