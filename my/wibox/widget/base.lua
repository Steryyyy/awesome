local a=require("my.gears.object")local b=require("my.gears.cache")local c=require("my.gears.matrix")local d=require("my.gears.debug")local e=require("my.gears.protected_call")local f=require("my.gears.table")local setmetatable=setmetatable;local pairs=pairs;local type=type;local table=table;local g={}g.widget={}a.properties._legacy_accessors(g.widget,"buttons",nil,true,function(h)return h[1]and(type(h[1])=="button"or h[1]._is_capi_button)or false end,true)function g.widget:set_visible(i)if i~=self._private.visible then self._private.visible=i;self:emit_signal("widget::layout_changed")self:emit_signal("widget::redraw_needed")end end;function g.widget:add_button(j)if not j then return end;if not self._private.buttons then self:set_buttons({j})return end;assert(self._private.buttons_formatted)self._private.buttons_formatted=f.join(self._private.buttons_formatted,j)table.insert(self._private.buttons,j)end;function g.widget:get_visible()return self._private.visible or false end;function g.widget:set_opacity(k)if k~=self._private.opacity then self._private.opacity=k;self:emit_signal("widget::redraw")end end;function g.widget:get_opacity()return self._private.opacity end;function g.widget:set_forced_width(l)if l~=self._private.forced_width then self._private.forced_width=l;self:emit_signal("widget::layout_changed")end end;function g.widget:get_forced_width()return self._private.forced_width end;function g.widget:set_forced_height(m)if m~=self._private.forced_height then self._private.forced_height=m;self:emit_signal("widget::layout_changed")end end;function g.widget:get_forced_height()return self._private.forced_height end;function g.widget:get_children()return{}end;function g.widget:set_children(n)end;local function o(p,q)for r,s in ipairs(q:get_children())do table.insert(p,s)o(p,s)end end;function g.widget:get_all_children()local p={}o(p,self)return p end;function g.set_widget_common(self,t)local s=t and g.make_widget_from_value(t)if s then g.check_widget(s)end;self._private.widget=s;self:emit_signal("widget::layout_changed")end;function g.widget:emit_signal_recursive(u,...)self:emit_signal("widget::emit_recursive",u,...)end;function g.widget:index(t,v,...)local w=self:get_children()for x,s in ipairs(w)do if s==t then return x,self,{...}elseif v then local y,z,A=s:index(t,true,self,...)if y and z then return y,z,A end end end;return nil,self,{}end;local B=setmetatable({},{__mode="kv"})local function C(t,D)if not t._private.widget_caches[D]then t._private.widget_caches[D]=b.new(function(...)return e(t[D],t,...)end)end;return t._private.widget_caches[D]end;g.no_parent_I_know_what_I_am_doing={}local function E(F,G)if F==g.no_parent_I_know_what_I_am_doing then return end;g.check_widget(F)g.check_widget(G)local H=B[G]or{}H[F]=true;B[G]=H end;local I;function I(t)local H=B[t]or{}B[t]={}t._private.widget_caches={}for s in pairs(H)do I(s)end end;function g.rect_to_device_geometry(J,K,L,l,m)return c.transform_rectangle(J.matrix,K,L,l,m)end;function g.fit_widget(F,M,t,l,m)E(F,t)if not t._private.visible then return 0,0 end;l=math.max(0,l)m=math.max(0,m)local s,N=0,0;if t.fit then s,N=C(t,"fit"):get(M,l,m)else local n=g.layout_widget(F,M,t,l,m)for r,O in ipairs(n or{})do local K,L,P,Q=c.transform_rectangle(O._matrix,0,0,O._width,O._height)s,N=math.max(s,K+P),math.max(N,L+Q)end end;s=t._private.forced_width or s or 0;N=t._private.forced_height or N or 0;s=math.max(0,math.min(s,l))N=math.max(0,math.min(N,m))return s,N end;function g.layout_widget(F,M,t,l,m)E(F,t)if not t._private.visible then return end;l=math.max(0,l)m=math.max(0,m)if t.layout then return C(t,"layout"):get(M,l,m)end end;function g.handle_button(R,t,K,L,j,S,T)K=K or L;local function U(V)return#V==1 and V[1]=="Any"end;local function W(X,i)if#X~=#i then return false end;for Y,Z in pairs(i)do if X[Y]~=Z then return false end end;return true end;local _={}for r,Z in pairs(t._private.buttons_formatted or{})do local a0=true;if Z.button~=0 and Z.button~=j then a0=false end;if not U(Z.modifiers)and not W(Z.modifiers,S)then a0=false end;if a0 then table.insert(_,Z)end end;for r,Z in pairs(_)do Z:emit_signal(R,T)end end;function g.place_widget_via_matrix(t,a1,l,m)assert(l>=0,"A widget's width cannot be negative: "..tostring(l))assert(m>=0,"A widget's height cannot be negative: "..tostring(m))return{_widget=t,_width=l,_height=m,_matrix=a1}end;function g.place_widget_at(t,K,L,l,m)return g.place_widget_via_matrix(t,c.create_translate(K,L),l,m)end;local function a2(a3)local a4=type(a3)return a4=="function"or a4=="table"and getmetatable(a3)and getmetatable(a3).__call,a4 end;local function a5(a4,a6)local a7=0;local a8,w={},{}for Y,Z in pairs(a4)do if type(Y)=="number"then if Z then if Y>a7 then a7=Y end;w[Y]=Z end else a8[Y]=Z end end;if not a6 then w=f.from_sparse(w)a7=#w end;return a7,a8,w end;local function a9(aa,ab)if not ab then return end;ab.layout=ab.layout or ab.widget;local ac=type(ab.layout)=="function"and ab.layout()or ab.layout;local z=ac.is_widget and ac or ac()local a7,a8,w=a5(ab,z.allow_empty_widget)local ad=a8.id;a8.id,a8.layout,a8.widget=nil,nil,nil;for ae,af in pairs(a8)do if z["set_"..ae]then z["set_"..ae](z,af)elseif type(z[ae])=="function"then z[ae](z,af)else z[ae]=af end end;for Y=1,a7 do local Z,ag,ah=w[Y],ad,nil;if Z then if not Z.is_widget and(Z.widget or Z.layout)then ah,ag=a9(aa,Z)w[Y]=ah elseif not Z.is_widget and a2(Z)then w[Y]=Z()end;g.check_widget(w[Y])if ag then z[ag]=ah;aa[ag]=aa[ag]or{}table.insert(aa[ag],ah)end end end;if w then z:set_children(w)end;return z,ad end;local function ai(self,aj)if rawget(self,"_private")then return self._private.by_id[aj]or{}else return rawget(self,"_by_id")[aj]or{}end end;function g.widget:setup(ak)local al,aa=self.set_widget or self.add or self.set_first,{}local s,ad=a9(aa,ak)al(self,s)if ad then rawset(self,ad,s)aa[ad]=aa[ad]or{}table.insert(aa[ad],1,s)end;if rawget(self,"_private")then self._private.by_id=aa else rawset(self,"_by_id",aa)end;if not rawget(self,"get_children_by_id")then rawset(self,"get_children_by_id",ai)end end;function g.make_widget_declarative(ak)local aa={}if not ak.layout and not ak.widget then ak.widget=g.make_widget(nil,ak.id)end;local s,ad=a9(aa,ak)local am=getmetatable(s)or{}local an=tostring(s)if ad then aa[ad]=aa[ad]or{}table.insert(aa[ad],1,s)end;if rawget(s,"_private")then s._private.by_id=aa else rawset(s,"_by_id",aa)end;rawset(s,"get_children_by_id",ai)am.__tostring=function()return string.format("%s (%s)",ad or s.widget_name or"N/A",an)end;return setmetatable(s,am)end;function g.make_widget_from_value(ao,...)if not ao then return nil end;local ap,a4=a2(ao)if ap then ao=ao(...)elseif a4=="table"then ao=ao.is_widget and ao or g.make_widget_declarative(ao)else d.print_warning("The argument is not a function, table, or widget.")return nil end;return ao end;function g.make_widget(aq,ar,ak)ak=ak or{}local as=ak.enable_properties~=false;if awesome.api_level<5 then as=ak.enable_properties end;local p=a{enable_properties=as,class=ak.class}p:connect_signal("widget::updated",function()p:emit_signal("widget::layout_changed")p:emit_signal("widget::redraw_needed")end)rawset(p,"_private",{})p._private.visible=true;p._private.opacity=1;rawset(p,"is_widget",true)p._private.forced_width=nil;p._private.forced_height=nil;p:connect_signal("button::press",function(...)return g.handle_button("press",...)end)p:connect_signal("button::release",function(...)return g.handle_button("release",...)end)if aq then rawset(p,"fit",function(r,M,l,m)return g.fit_widget(p,M,aq,l,m)end)rawset(p,"layout",function(r,r,l,m)return{g.place_widget_at(aq,0,0,l,m)}end)aq:connect_signal("widget::layout_changed",function()p:emit_signal("widget::layout_changed")end)aq:connect_signal("widget::redraw_needed",function()p:emit_signal("widget::redraw_needed")end)end;I(p)p:connect_signal("widget::layout_changed",function()I(p)end)for Y,Z in pairs(g.widget)do rawset(p,Y,Z)end;rawset(p,"widget_name",ar or a.modulename(3))local am=getmetatable(p)or{}local an=tostring(p)am.__tostring=function()return string.format("%s (%s)",p.widget_name,an)end;if not ak.enable_properties then am.__index=function(r,at)if at=="buttons"then return g.widget.get_buttons(p)end;return rawget(p,at)end;am.__newindex=function(r,at,au)if at=="buttons"then g.widget.set_buttons(p,au)else rawset(p,at,au)end end end;return setmetatable(p,am)end;function g.empty_widget()return g.make_widget()end;function g.check_widget(t)assert(type(t)=="table","Type should be table, but is "..tostring(type(t)))assert(t.is_widget,"Argument is not a widget!")for r,av in pairs({"connect_signal","disconnect_signal"})do assert(type(t[av])=="function",av.." is not a function")end end;return g